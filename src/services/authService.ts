// Mock OAuth Service –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏
// –í —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ –∑–¥–µ—Å—å –±—É–¥—É—Ç –Ω–∞—Å—Ç–æ—è—â–∏–µ OAuth –ø—Ä–æ–≤–∞–π–¥–µ—Ä—ã

interface OAuthProvider {
  name: string;
  clientId: string;
  redirectUri: string;
  scope: string[];
}

// Mock –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è OAuth –ø—Ä–æ–≤–∞–π–¥–µ—Ä–æ–≤
const OAUTH_CONFIG: Record<string, OAuthProvider> = {
  google: {
    name: 'Google',
    clientId: 'GOOGLE_CLIENT_ID', // –í —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ –∏–∑ .env
    redirectUri: `${window.location.origin}/auth/callback`,
    scope: ['email', 'profile']
  },
  vk: {
    name: 'VKontakte',
    clientId: 'VK_CLIENT_ID', // –í —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ –∏–∑ .env
    redirectUri: `${window.location.origin}/auth/callback`,
    scope: ['email']
  },
  telegram: {
    name: 'Telegram',
    clientId: 'TELEGRAM_BOT_TOKEN', // –í —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ –∏–∑ .env
    redirectUri: `${window.location.origin}/auth/callback`,
    scope: ['identify']
  }
};

export class AuthService {
  // Mock Google OAuth
  static async loginWithGoogle(): Promise<any> {
    console.log('üîÑ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –≤—Ö–æ–¥–∞ —á–µ—Ä–µ–∑ Google...');
    
    // –ò–º–∏—Ç–∞—Ü–∏—è —Ä–µ–¥–∏—Ä–µ–∫—Ç–∞ –Ω–∞ Google OAuth
    return new Promise((resolve) => {
      setTimeout(() => {
        resolve({
          id: 'google_' + Date.now(),
          name: 'Google –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å',
          email: 'user@gmail.com',
          avatar: 'https://ui-avatars.com/api/?name=Google&background=ea4335&color=fff',
          provider: 'google'
        });
      }, 1500);
    });
  }

  // Mock VK OAuth
  static async loginWithVK(): Promise<any> {
    console.log('üîÑ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –≤—Ö–æ–¥–∞ —á–µ—Ä–µ–∑ VK...');
    
    return new Promise((resolve) => {
      setTimeout(() => {
        resolve({
          id: 'vk_' + Date.now(),
          name: 'VK –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å',
          email: 'user@vk.ru',
          avatar: 'https://ui-avatars.com/api/?name=VK&background=0077ff&color=fff',
          provider: 'vk'
        });
      }, 1500);
    });
  }

  // Telegram OAuth —Å —Ä–µ–¥–∏—Ä–µ–∫—Ç–æ–º –Ω–∞ –∫–∞–Ω–∞–ª
  static async loginWithTelegram(): Promise<any> {
    console.log('üîÑ –ü–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –Ω–∞ Telegram –∫–∞–Ω–∞–ª –¥–ª—è –ø–æ–¥–ø–∏—Å–∫–∏...');
    
    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ–ø—ã—Ç–∫—É –≤—Ö–æ–¥–∞ —á–µ—Ä–µ–∑ Telegram
    localStorage.setItem('telegram_auth_attempt', 'true');
    localStorage.setItem('telegram_auth_timestamp', Date.now().toString());
    
    // –ü–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞ Telegram –∫–∞–Ω–∞–ª –¥–ª—è –ø–æ–¥–ø–∏—Å–∫–∏
    window.open('https://t.me/+Rb3TTlbFs0kwYzky', '_blank');
    
    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    const shouldProceed = confirm(
      'üîî –î–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏:\n\n' +
      '1Ô∏è‚É£ –ü–æ–¥–ø–∏—à–∏—Ç–µ—Å—å –Ω–∞ Telegram –∫–∞–Ω–∞–ª\n' +
      '2Ô∏è‚É£ –ù–∞–∂–º–∏—Ç–µ "–û–ö" –ø–æ—Å–ª–µ –ø–æ–¥–ø–∏—Å–∫–∏\n\n' +
      '–ì–æ—Ç–æ–≤—ã –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å?'
    );
    
    if (shouldProceed) {
      // –ò–º–∏—Ç–∏—Ä—É–µ–º —É—Å–ø–µ—à–Ω—É—é —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é –ø–æ—Å–ª–µ –ø–æ–¥–ø–∏—Å–∫–∏
      return new Promise((resolve) => {
        setTimeout(() => {
          resolve({
            id: 'telegram_' + Date.now(),
            name: 'Telegram –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å',
            email: 'user@telegram.org',
            avatar: 'https://cdn.jsdelivr.net/gh/twitter/twemoji@14.0.2/assets/svg/1f680.svg',
            provider: 'telegram',
            subscribed: true
          });
        }, 1000);
      });
    } else {
      throw new Error('–ù–µ–æ–±—Ö–æ–¥–∏–º–æ –ø–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –∫–∞–Ω–∞–ª –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏');
    }
  }

  // Email —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è
  static async registerWithEmail(email: string, password: string, name: string): Promise<any> {
    console.log('üîÑ –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —á–µ—Ä–µ–∑ email...');
    
    // Mock –≤–∞–ª–∏–¥–∞—Ü–∏—è
    if (!email || !password || !name) {
      throw new Error('–í—Å–µ –ø–æ–ª—è –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã –¥–ª—è –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è');
    }

    if (password.length < 6) {
      throw new Error('–ü–∞—Ä–æ–ª—å –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å –º–∏–Ω–∏–º—É–º 6 —Å–∏–º–≤–æ–ª–æ–≤');
    }

    return new Promise((resolve, reject) => {
      setTimeout(() => {
        // Mock –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        const existingUser = localStorage.getItem(`user_${email}`);
        if (existingUser) {
          reject(new Error('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —Ç–∞–∫–∏–º email —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç'));
          return;
        }

        const newUser = {
          id: 'email_' + Date.now(),
          name,
          email,
          avatar: `https://ui-avatars.com/api/?name=${encodeURIComponent(name)}&background=f97316&color=fff`,
          provider: 'email'
        };

        // –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (mock –±–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö)
        localStorage.setItem(`user_${email}`, JSON.stringify(newUser));
        
        resolve(newUser);
      }, 2000);
    });
  }

  // Email –≤—Ö–æ–¥
  static async loginWithEmail(email: string, password: string): Promise<any> {
    console.log('üîÑ –í—Ö–æ–¥ —á–µ—Ä–µ–∑ email...');
    
    return new Promise((resolve, reject) => {
      setTimeout(() => {
        const userData = localStorage.getItem(`user_${email}`);
        if (!userData) {
          reject(new Error('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω'));
          return;
        }

        resolve(JSON.parse(userData));
      }, 1500);
    });
  }

  // –ü–æ–ª—É—á–µ–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ OAuth –¥–ª—è —Ä–µ–∞–ª—å–Ω–æ–≥–æ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
  static getOAuthUrl(provider: string): string {
    const config = OAUTH_CONFIG[provider];
    if (!config) {
      throw new Error(`–ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π –ø—Ä–æ–≤–∞–π–¥–µ—Ä: ${provider}`);
    }

    // –≠—Ç–æ mock URL - –≤ —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ –±—É–¥–µ—Ç –Ω–∞—Å—Ç–æ—è—â–∏–π OAuth URL
    return `https://mock-oauth.example.com/${provider}?client_id=${config.clientId}&redirect_uri=${config.redirectUri}&scope=${config.scope.join(',')}`;
  }
}

// –£—Ç–∏–ª–∏—Ç—ã –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å —Ç–æ–∫–µ–Ω–∞–º–∏ (mock)
export class TokenService {
  private static readonly TOKEN_KEY = 'neobake_access_token';
  private static readonly REFRESH_TOKEN_KEY = 'neobake_refresh_token';

  static saveTokens(accessToken: string, refreshToken?: string) {
    localStorage.setItem(this.TOKEN_KEY, accessToken);
    if (refreshToken) {
      localStorage.setItem(this.REFRESH_TOKEN_KEY, refreshToken);
    }
  }

  static getAccessToken(): string | null {
    return localStorage.getItem(this.TOKEN_KEY);
  }

  static getRefreshToken(): string | null {
    return localStorage.getItem(this.REFRESH_TOKEN_KEY);
  }

  static clearTokens() {
    localStorage.removeItem(this.TOKEN_KEY);
    localStorage.removeItem(this.REFRESH_TOKEN_KEY);
  }
}